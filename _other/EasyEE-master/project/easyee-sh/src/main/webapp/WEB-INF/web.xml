<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">

	<display-name>EasyEE-SH</display-name>

	<welcome-file-list>
		<welcome-file>toLogin</welcome-file>
	</welcome-file-list>

	<!-- Spring过滤器 -->
	<filter>
		<filter-name>setCharaterEncoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param><!-- 编码方式 -->
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param><!-- 强制覆盖客户端请求的编码，进行编码转换 -->
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>setCharaterEncoding</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>


	<!-- Shiro Spring Intergation -->
	<!-- The filter-name matches name of a 'shiroFilter' bean inside applicationContext.xml -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- Shiro Web Intergation(shiro.ini, not spring) -->
	<!-- <listener> <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class> 
		</listener> <filter> <filter-name>shiroFilter</filter-name> <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class> 
		</filter> -->


	<!-- Make sure any request you want accessible to Shiro is filtered. /* catches all -->
	<!-- requests. Usually this filter mapping is defined first (before all others) to -->
	<!-- ensure that Shiro works in subsequent filters in the filter chain: -->
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>ERROR</dispatcher>
	</filter-mapping>


	<!-- EasyFilter -->
	<filter>
		<filter-name>contentFilter</filter-name>
		<filter-class>cn.easyproject.easyfilter.filter.EasyFilter</filter-class>
		<init-param>
			<param-name>charset</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>contentFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>methodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>methodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>



	<!-- Spring Web MVC -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/ApplicationContext_mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup><!-- 启动时初始化Servlet -->
		<multipart-config>
			<max-file-size>524288000</max-file-size> <!-- 单个文件的最大大小 10MB-->
			<max-request-size>524288000</max-request-size> <!-- 一次上传文件的最大大小 100MB -->
			<!-- 当文件大小超过指定的大小后将写入到硬盘上。默认0，全部写入临时文件 -->
			<file-size-threshold>0</file-size-threshold>
		</multipart-config>
	</servlet>
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- needed for ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/ApplicationContext.xml</param-value>
	</context-param>

	<!-- Bootstraps the root web application context before servlet initialization -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<servlet>
		<servlet-name>captcha</servlet-name>
		<jsp-file>/jsp/VerifyCode.jsp</jsp-file>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- CKFinder Start -->
	<servlet>
		<servlet-name>ConnectorServlet</servlet-name>
		<servlet-class>com.ckfinder.connector.ConnectorServlet</servlet-class>
		<init-param>
			<description>
				Path to configuration file can be relative path inside application,
				absolute path on local file system or UNC path.
			</description>
			<param-name>XMLConfig</param-name>
			<param-value>/WEB-INF/config.xml</param-value>
		</init-param>
		<init-param>
			<param-name>debug</param-name>
			<param-value>false</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>ConnectorServlet</servlet-name>
		<url-pattern>
			/staticresources/ckfinder/core/connector/java/connector.java
		</url-pattern>
	</servlet-mapping>
	
	<!-- Tomcat CORS for CKFinder when back-end separation -->
	<!-- <filter>
		<filter-name>CorsFilter</filter-name>
		<filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
		<init-param>
			<param-name>cors.allowed.origins</param-name>
			<param-value>*</param-value>
		</init-param>
		<init-param>
			<param-name>cors.allowed.methods</param-name>
			<param-value>GET,POST,HEAD,OPTIONS,PUT,DELETE</param-value>
		</init-param>
		<init-param>
			<param-name>cors.allowed.headers</param-name>
			<param-value>*</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CorsFilter</filter-name>
		<url-pattern>/staticresources/ckfinder/core/connector/java/connector.java</url-pattern>
	</filter-mapping> -->
	
	<!-- CKFinder End -->


	<!-- JavaMelody Start -->
	<filter>
		<filter-name>javamelody</filter-name>
		<filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
		<async-supported>true</async-supported>

		<init-param>
			<param-name>url-exclude-pattern</param-name>
			<param-value>/staticresources/.*|/webjars/.*|/css/.*|/images/.*|/fonts/.*|/js/.*</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>javamelody</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>ASYNC</dispatcher>
	</filter-mapping>
	<listener>
		<listener-class>net.bull.javamelody.SessionListener</listener-class>
	</listener>
	<!-- JavaMelody End -->


	<!-- @TODO -->
	<!-- Error page -->
	<!-- <error-page> <error-code>404</error-code> <location>/jsp/error/notFound.jsp</location> </error-page> -->
	<!-- <error-page> <error-code>500</error-code> <location>/jsp/error/serverError.jsp</location> </error-page> -->
</web-app>